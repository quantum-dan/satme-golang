{"name":"SATme","tagline":"The SATme education platform for test preparation and finding scholarships.","body":"# Welcome to SATme!\r\nSATme is a new platform designed to help students get into the college they want with the scholarships they need.\r\n\r\n## How does it work?\r\n### For the student:\r\n1. Create an account and log in.\r\n2. Take one of our practice SAT or ACT tests.  This will predict a score on the real thing and store it for you.\r\n3. Head over to the Scholarships page.  You'll be asked for some demographic data (optional, and we won't share it with anyone else), and then we'll match you with any scholarships you're eligible for.  They will be marked as \"Eligible\" or \"Highly Eligible\", depending on how closely your data matches their criteria.  You will also be informed of scholarships which are just beyond your current scores, so you know what you'll get if you improve.\r\n4. Head over to the Test Prep section and we can give you tips on how to improve your score.  We'll point out your weakest areas and give you specific pointers, as well as general advice like how to keep calm for the test.\r\n\r\n### For the school:\r\n1. Create a school account and invite your students to create accounts with your school.\r\n2. As your students use our service, you can view their progress.\r\n3. We'll help you identify the students who need the most help so you can focus your efforts where they'll be most useful.\r\n\r\n## Hey, geeks!\r\nSo, you're a budding computer geek, eh?  Well, it just so happens that you can study the inner workings of SATme if you'd like.  The source code is available at [our GitHub page](https://github.com/quantum-dan/satme).  Here's how we built it:\r\n* The programming language used on the backend is [Golang](https://golang.org/).  It's simple and easy to work with, and has excellent libraries and toolkits for writing server-side code.  That is, after all, what it's designed for.\r\n* We're using [MongoDB](https://www.mongodb.org/) for a database.  MongoDB is easier to scale and faster to write than SQL, as well as being easier to administer.  The tradeoff is that it's less safe in the event of a crash or similar, but that doesn't usually matter unless any single database interaction is of enormous value, which is not the case for us.\r\n* Our server-side toolkit is the [Gorilla Toolkit](http://gorillatoolkit.org).  It's simple and modular, which makes life easy for us in terms of learning to use it and integrating with other libraries and tools.\r\n* We use the [MGO](https://labix.org/mgo) MongoDB driver.  This is likewise simple and easy to use.\r\n* Passwords are hashed with bcrypt, which uses the Blowfish algorithm.  bcrypt is designed specifically for passwords, with irreversible encryption like the SHA and MD5 checksum algorithms.  It has one further edge, though: it's very slow (our first version using it took easily a minute or so to hash a password, so we had to use a lower time cost).  These two factors mean that anyone who got their hands on our database couldn't decrypt the passwords, but would have to brute-force them, and that would take a long time--hashing still takes a few seconds even with the reduced cost.\r\n* We use the Go standard library's html/templates to generate dynamic HTML.  This lets us do things like embed if statements in HTML templates so we can use the same templates for multiple purposes.  For example, the Account Creation template will either display the form or inform you of success, depending on the data passed to it.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}